```{r}
N_pca_to_keep    <- readRDS(file=fs::path(r_objects_folder, "082_N_pca_to_keep.rds"))
glmnet_res_93    <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_res_93.rds"))
glmnet_final_93  <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_final_93.rds"))
glmnet_res_7     <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_res_7.rds"))
glmnet_final_7   <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_final_7.rds"))
glmnet_res_14    <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_res_14.rds"))
glmnet_final_14  <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_final_14.rds"))
glmnet_res_32    <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_res_32.rds"))
glmnet_final_32  <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_final_32.rds"))
glmnet_res_rnj    <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_res_rnj.rds"))
glmnet_final_rnj  <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_final_rnj.rds"))

glmnet_final_93_rcs  <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_final_93_rcs.rds"))
glmnet_final_7_rcs   <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_final_7_rcs.rds"))
glmnet_final_14_rcs  <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_final_14_rcs.rds"))
glmnet_final_32_rcs  <- readRDS(file=fs::path(r_objects_folder, "090_glmnet_final_32_rcs.rds"))

rf_final_93  <- readRDS(file=fs::path(r_objects_folder, "090_rf_final_93.rds"))
rf_final_7   <- readRDS(file=fs::path(r_objects_folder, "090_rf_final_7.rds"))
rf_final_14  <- readRDS(file=fs::path(r_objects_folder, "090_rf_final_14.rds"))
rf_final_32  <- readRDS(file=fs::path(r_objects_folder, "090_rf_final_32.rds"))
```

# Delirium prediction - model fit

The elastic net models were fit on four variable sets across two modeling approaches:

-   The variable sets:

    -   The first `r N_pca_to_keep` PCA components from the set of 93 variables.

    -   The set of 7 PCA components from the 7 variables that had three or more votes from the expert panel

    -   The set of 14 PCA components from the 14 variables that had two or more votes from the expert panel

    -   The first `r N_pca_to_keep` PCA components from the 32 variables that had one or more votes from the expert panel

-   The models:

    -   original PCA components

    -   restricted cubic splines of the first `r N_pca_to_keep` PCA components

The random forest models were fit on four variable sets:

-   The variable sets:

    -   The first `r N_pca_to_keep` PCA components from the set of 93 variables.

    -   The set of 7 PCA components from the 7 variables that had three or more votes from the expert panel

    -   The set of 14 PCA components from the 14 variables that had two or more votes from the expert panel

    -   The first `r N_pca_to_keep` PCA components from the 32 variables that had one or more votes from the expert panel

Another elastic net model was proposed by RNJ. The variables used were:

-   Age, GCP and lives alone. Restricted cubic splines were added to the model.

**Model tuning**

The training data was into 10 cross-validation sets.

The models were tuned to maximize the kappa statistic.

The elastic net models were tuned using 25 sets of possible values.

These are the hyperparameters that were tuned:

-   Elastic net: alpha (mixture between lasso and ridge regression) and penalty term

The random forest models were tuned using 40 sets of possible values.

These are the hyperparameters that were tuned:

-   Random forest: number of trees and minimum sample size per node

## GLMNET

### Original PCA components

<!-- These are the hyperparameters that have the best kappa statistics for the elastic net model: -->

<!-- Model using the first `r N_pca_to_keep` of 93 PCA components. -->

<!-- ```{r} -->

<!-- # collect_metrics(glm_res) -->

<!-- # collect_metrics(glmnet_res) -->

<!-- autoplot(glmnet_res_93) -->

<!-- show_best(glmnet_res_93, metric = "kap") -->

<!-- ``` -->

<!-- Model using the 7 PCA components from variables that had three or more votes from the expert panel. -->

<!-- ```{r} -->

<!-- autoplot(glmnet_res_7) -->

<!-- show_best(glmnet_res_7, metric = "kap") -->

<!-- ``` -->

<!-- Model using the 14 PCA components from variables that had two or more votes from the expert panel. -->

<!-- ```{r} -->

<!-- autoplot(glmnet_res_14) -->

<!-- show_best(glmnet_res_14, metric = "kap") -->

<!-- ``` -->

<!-- Model using the first `r N_pca_to_keep` of 32 PCA components from variables that had one or more votes from the expert panel. -->

<!-- ```{r} -->

<!-- autoplot(glmnet_res_32) -->

<!-- show_best(glmnet_res_32, metric = "kap") -->

<!-- ``` -->

```{r}

fold1 <- glmnet_res_rnj %>%
  slice(1) %>%
  pull(splits)
training_truth_fold1 <- testing(fold1[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 1)

fold2 <- glmnet_res_rnj %>%
  slice(2) %>%
  pull(splits)
training_truth_fold2 <- testing(fold2[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 2)

fold3 <- glmnet_res_rnj %>%
  slice(3) %>%
  pull(splits)
training_truth_fold3 <- testing(fold3[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 3)

fold4 <- glmnet_res_rnj %>%
  slice(4) %>%
  pull(splits)
training_truth_fold4 <- testing(fold4[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 4)

fold5 <- glmnet_res_rnj %>%
  slice(5) %>%
  pull(splits)
training_truth_fold5 <- testing(fold5[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 5)

fold6 <- glmnet_res_rnj %>%
  slice(6) %>%
  pull(splits)
training_truth_fold6 <- testing(fold6[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 6)

fold7 <- glmnet_res_rnj %>%
  slice(7) %>%
  pull(splits)
training_truth_fold7 <- testing(fold7[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 7)

fold8 <- glmnet_res_rnj %>%
  slice(8) %>%
  pull(splits)
training_truth_fold8 <- testing(fold8[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 8)

fold9 <- glmnet_res_rnj %>%
  slice(9) %>%
  pull(splits)
training_truth_fold9 <- testing(fold9[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 9)

fold10 <- glmnet_res_rnj %>%
  slice(10) %>%
  pull(splits)
training_truth_fold10 <- testing(fold10[[1]]) %>%
  select(vdsagesdeliriumever) %>%
  mutate(fold = 10)

training_truth <- training_truth_fold1 %>%
  bind_rows(training_truth_fold2) %>%
  bind_rows(training_truth_fold3) %>%
  bind_rows(training_truth_fold4) %>%
  bind_rows(training_truth_fold5) %>%
  bind_rows(training_truth_fold6) %>%
  bind_rows(training_truth_fold7) %>%
  bind_rows(training_truth_fold8) %>%
  bind_rows(training_truth_fold9) %>%
  bind_rows(training_truth_fold10) 

glmnet_train_rnj <- collect_predictions(glmnet_res_rnj) %>%
  select(id, .row, .pred_class) %>%
  rename(.pred_class_rnj = .pred_class) %>%
  slice(1:448)

glmnet_train_7 <- collect_predictions(glmnet_res_7) %>%
  select(id, .row, .pred_class) %>%
  rename(.pred_class_7 = .pred_class) %>%
  slice(1:448)

glmnet_train_14 <- collect_predictions(glmnet_res_14) %>%
  select(id, .row, .pred_class) %>%
  rename(.pred_class_14 = .pred_class) %>%
  slice(1:448)

glmnet_train_32 <- collect_predictions(glmnet_res_32) %>%
  select(id, .row, .pred_class) %>%
  rename(.pred_class_32 = .pred_class) %>%
  slice(1:448)

glmnet_train_93 <- collect_predictions(glmnet_res_93) %>%
  select(id, .row, .pred_class) %>%
  rename(.pred_class_93 = .pred_class) %>%
  slice(1:448)

foo <- training_truth %>%
  bind_cols(glmnet_train_7) %>%
  bind_cols(glmnet_train_14) %>%
  bind_cols(glmnet_train_32) %>%
  bind_cols(glmnet_train_93) %>%
  bind_cols(glmnet_train_rnj) 
```

```{r}
my_kappa_table <- function(df, x, y) {
  
  foo <- df %>%
    select({{x}}, {{y}}) 
  
  goo <- table(foo)
  hoo <- vcd::Kappa(goo)

  kappa_table <- tibble(n = dim(foo)[1], 
                        value = hoo$Weighted[1], 
                        z = hoo$Weighted[1]/hoo$Weighted[2], 
                        p_value = 2*pnorm(-abs(z)))
  
  kappa_table %>%
    gt() %>%
    # tab_header("Cohen's Kappa for 2 Raters") %>%
    cols_label(
      value = "Weighted Kappa",
      z = "z",
      p_value = "p-value"
    ) %>%
    fmt_number(
      columns = c(value),
      decimals = 3
    ) %>%
    fmt_number(
      columns = c(z),
      decimals = 2
    ) %>%
    fmt(
      columns = c(p_value),
      fns = function(x) {
        gtsummary::style_pvalue(x)
      }
    ) 
}
```

#### Performance in training set

Model using the first 7 of 93 PCA components.

```{r}
gtsummary::tbl_cross(foo, .pred_class_7, vdsagesdeliriumever)
my_kappa_table(foo, .pred_class_7, vdsagesdeliriumever)
```

Model using the first 14 of 93 PCA components.

```{r}
gtsummary::tbl_cross(foo, .pred_class_14, vdsagesdeliriumever)
my_kappa_table(foo, .pred_class_14, vdsagesdeliriumever)
```

Model using the first 32 of 93 PCA components.

```{r}
gtsummary::tbl_cross(foo, .pred_class_32, vdsagesdeliriumever)
my_kappa_table(foo, .pred_class_32, vdsagesdeliriumever)
```

Model using all 93 PCA components.

```{r}
gtsummary::tbl_cross(foo, .pred_class_93, vdsagesdeliriumever)
my_kappa_table(foo, .pred_class_93, vdsagesdeliriumever)
```

Model using the variables RNJ suggested.

```{r}
gtsummary::tbl_cross(foo, .pred_class_rnj, vdsagesdeliriumever)

```

#### Performance in testing set

Model using the first `r N_pca_to_keep` of 93 PCA components.

```{r}
collect_metrics(glmnet_final_93)
glmnet_final_93 %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)
  
```

Model using the 7 PCA components from variables that had three or more votes from the expert panel.

```{r}
collect_metrics(glmnet_final_7)
glmnet_final_7 %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```

Model using the 14 PCA components from variables that had two or more votes from the expert panel.

```{r}
collect_metrics(glmnet_final_14)
glmnet_final_14 %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```

Model using the first `r N_pca_to_keep` of 32 PCA components from variables that had one or more votes from the expert panel.

```{r}
collect_metrics(glmnet_final_32)
glmnet_final_32 %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```

## Restricted cubic splines

<!-- These are the hyperparameters that have the best kappa statistics for the elastic net model: -->

<!-- Model using the first `r N_pca_to_keep` of 93 PCA components. -->

<!-- ```{r} -->

<!-- # collect_metrics(glm_res_rcs) -->

<!-- # collect_metrics(glmnet_res_rcs) -->

<!-- autoplot(glmnet_res_93_rcs) -->

<!-- show_best(glmnet_res_93_rcs, metric = "kap") -->

<!-- ``` -->

<!-- Model using the 7 PCA components from variables that had three or more votes from the expert panel. -->

<!-- ```{r} -->

<!-- autoplot(glmnet_res_7_rcs) -->

<!-- show_best(glmnet_res_7_rcs, metric = "kap") -->

<!-- ``` -->

<!-- Model using the 14 PCA components from variables that had two or more votes from the expert panel. -->

<!-- ```{r} -->

<!-- autoplot(glmnet_res_14_rcs) -->

<!-- show_best(glmnet_res_14_rcs, metric = "kap") -->

<!-- ``` -->

<!-- Model using the first `r N_pca_to_keep` of 32 PCA components from variables that had one or more votes from the expert panel. -->

<!-- ```{r} -->

<!-- autoplot(glmnet_res_32_rcs) -->

<!-- show_best(glmnet_res_32_rcs, metric = "kap") -->

<!-- ``` -->

#### Performance in testing set

Model using the first `r N_pca_to_keep` of 93 PCA components.

```{r}
collect_metrics(glmnet_final_93_rcs)
glmnet_final_93_rcs %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)
  
```

Model using the 7 PCA components from variables that had three or more votes from the expert panel.

```{r}
collect_metrics(glmnet_final_7_rcs)
glmnet_final_7_rcs %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```

Model using the 14 PCA components from variables that had two or more votes from the expert panel.

```{r}
collect_metrics(glmnet_final_14_rcs)
glmnet_final_14_rcs %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```

Model using the first `r N_pca_to_keep` of 32 PCA components from variables that had one or more votes from the expert panel.

```{r}
collect_metrics(glmnet_final_32_rcs)
glmnet_final_32_rcs %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```

## Random forest

### Original PCA components

#### Performance in testing set

Model using the first `r N_pca_to_keep` of 93 PCA components.

```{r}
collect_metrics(rf_final_93)
rf_final_93 %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)
  
```

Model using the 7 PCA components from variables that had three or more votes from the expert panel.

```{r}
collect_metrics(rf_final_7)
rf_final_7 %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```

Model using the 14 PCA components from variables that had two or more votes from the expert panel.

```{r}
collect_metrics(rf_final_14)
rf_final_14 %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```

Model using the first `r N_pca_to_keep` of 32 PCA components from variables that had one or more votes from the expert panel.

```{r}
collect_metrics(rf_final_32)
rf_final_32 %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```

## Elastic net - RNJ model

#### Performance in testing set

Model proposed by RNJ.

```{r}
collect_metrics(glmnet_final_rnj)
glmnet_final_rnj  %>%
  collect_predictions() %>%
  gtsummary::tbl_cross(.pred_class, vdsagesdeliriumever)


```
